//! This library exposes the raw C API as provided in mex.h, matrix.h, mat.h and engine.h.
//! The rust bindings were mostly automatically generated by bindgen and named the same or similar as in the C headers.
//! Some manual changes were made to the bindings to ease usage or simplify the exposed API without sacrificing functionality, such as replacing type definitions for the fixed size integer types with the native fixed size types from Rust.
//!
//! # IMPORTANT:
//! This library exposes both the older mex API (separate_complex) which stands to be deprecated by Mathworks in the future as well as the newer mex API (interleaved_complex), which is to become the default in Matlab in the future. Both versions have significant overlap in their API, but also some important differences.
//! Most importantly, some types have a different representation (e.g. mxArray of complex numbers) and some functions behave differently even though the API stayed the same (e.g. [mxGetData]).
//! This library exposes both APIs in their own namespace to minimize risk of confusion between versions. **Do not mix functions or types of both namespaces. It is recommended to enable only one of both APIs with the corresponding feature per crate.**
//!
//! While it is impossible to enable both versions of the API using the `mex` command in Matlab itself and could also be achieved here using mutually exclusive features, this has significant drawbacks.
//! These differences can be looked up in the regular [documentation provided by Matlab](https://de.mathworks.com/help/matlab/matlab_external/matlab-support-for-interleaved-complex.html).
//!
//! [mxGetData]: https://de.mathworks.com/help/matlab/apiref/mxgetdata.html

#[cfg(not(target_pointer_width = "64"))]
compile_error!("The bindings are only valid for 64-bit applications. All Matlab versions after 2015b are only available in 64-bit.");

mod raw;
#[cfg(feature = "interleaved-complex")]
pub use raw::interleaved_complex;
#[cfg(feature = "separate-complex")]
pub use raw::separate_complex;
